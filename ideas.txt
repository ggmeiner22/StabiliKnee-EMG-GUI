Live data feed
https://www.geeksforgeeks.org/matplotlib-animation-funcanimation-class-in-python/
a. Scroll bar to see the data that comes off screen
b. pinpoint hover over data and see value readings
c. Mean amplitude line
d. total muscle activity

Method 1: Using Matplotlib's FuncAnimation
This method works well for real-time plotting if the CSV file is being updated in real time.

Steps:
Read the latest data from the CSV file.
Update the plot dynamically.
Use FuncAnimation to refresh the graph at regular intervals.
Example Code:
python
Copy
Edit
import csv
import matplotlib.pyplot as plt
import matplotlib.animation as animation

csv_filename = "4sensor_readings.csv"  # Change this to argv[1] in your script if needed

# Initialize the figure and axis
fig, ax = plt.subplots()
x_data, y_data = [], []  # Lists to store the data points
line, = ax.plot([], [], 'r-', label="Sensor Data")  # Line object

def read_csv():
    """Read latest values from CSV file."""
    with open(csv_filename, mode='r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # Skip header row
        data = list(csv_reader)  # Read all rows

    if data:
        x_values = [int(row[0]) for row in data]  # Assuming the first column is time or index
        y_values = [float(row[1]) for row in data]  # Assuming the second column is sensor readings
        return x_values, y_values
    return [], []

def update(frame):
    """Update function for animation."""
    x_values, y_values = read_csv()
    
    if x_values and y_values:
        x_data.clear()
        y_data.clear()
        x_data.extend(x_values)
        y_data.extend(y_values)
        
        line.set_data(x_data, y_data)
        ax.relim()
        ax.autoscale_view()

    return line,

# Set up the animation
ani = animation.FuncAnimation(fig, update, interval=1000, blit=False)

plt.xlabel("Time")
plt.ylabel("Sensor Reading")
plt.legend()
plt.title("Live Sensor Data from CSV")
plt.show()
Method 2: Using a While Loop (for Console-Based Live Updates)
If you don’t need Matplotlib but want to process live data from a CSV file (e.g., for calculations or logging), you can use a while loop.

python
Copy
Edit
import csv
import time

csv_filename = "4sensor_readings.csv"  # Or sys.argv[1]

def read_last_row():
    """Read the last row of a CSV file."""
    with open(csv_filename, mode='r') as file:
        csv_reader = csv.reader(file)
        next(csv_reader)  # Skip headers
        data = list(csv_reader)  # Read all rows
        if data:
            return data[-1]  # Return the last row
    return None

while True:
    last_row = read_last_row()
    if last_row:
        print(f"Latest Data: {last_row}")  # Process the data however you like
    time.sleep(1)  # Wait 1 second before reading again
Which Method Should You Use?
✅ Use Method 1 (FuncAnimation) if you want a real-time graph of sensor readings.
✅ Use Method 2 (While Loop) if you just need to process live CSV data in the background without visualization.
